const gameboardFactory = require('./gameboardFactory');

it('placeShip function places a ship horizontally', () => {
    let testBoard = gameboardFactory();
    testBoard.placeShip([0, 0], 'horizontal', 4);
    expect(testBoard.board).toMatchObject([
            ['x', 'x', 'x', 'x', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',]
    ]);
})

it('placeShip function places a ship horizontally', () => {
    let testBoard = gameboardFactory();
    testBoard.placeShip([0, 1], 'horizontal', 4);
    expect(testBoard.board).toMatchObject([
            ['-', 'x', 'x', 'x', 'x', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',]
    ]);
})

it('placeShip function places a ship horizontally', () => {
    let testBoard = gameboardFactory();
    testBoard.placeShip([9, 9], 'horizontal', 1);
    expect(testBoard.board).toMatchObject([
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', 'x',]
    ]);
})

it('placeShip function places a ship vertically', () => {
    let testBoard = gameboardFactory();
    testBoard.placeShip([0, 0], 'vertical', 3);
    expect(testBoard.board).toMatchObject([
            ['x', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['x', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['x', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',]
    ]);
})

it('placeShip function places a ship vertically', () => {
    let testBoard = gameboardFactory();
    testBoard.placeShip([4, 9], 'vertical', 5);
    expect(testBoard.board).toMatchObject([
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', 'x',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', 'x',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', 'x',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', 'x',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', 'x',],
            ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',]
    ]);
})

it('placeShip function throws error message for invalid move', () => {
    let testBoard = gameboardFactory();
    expect(testBoard.placeShip([9, 9], 'vertical', 5)).toBe('Not valid move');
})

it('can call ship Factory function', () => {
    let testBoard = gameboardFactory();
    testBoard.placeShip([4, 9], 'vertical', 5);
    testBoard.placeShip([4, 9], 'vertical', 2);
    expect(testBoard.ships).toMatchObject([]);
})

//it needs to check for already existing ships before it places new ships

// [
//     ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
//     ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
//     ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
//     ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
//     ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
//     ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
//     ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
//     ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
//     ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',],
//     ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-',]
// ]